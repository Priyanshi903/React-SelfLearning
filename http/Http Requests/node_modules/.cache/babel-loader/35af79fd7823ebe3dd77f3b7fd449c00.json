{"ast":null,"code":"var _jsxFileName = \"C:\\\\ES-06_JS\\\\React\\\\http\\\\Http Requests\\\\src\\\\App.js\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport axios from 'axios';\nimport AddMovie from './components/AddMovie';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null); // alternative:-  useCallback(async function() { ....non-arrow function\n\n  const fetchMovieshandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // to get error\n      // fetch api doesn't treats error status code as real error,it will not throw a technical error if we will get back error status code\n      // const response = await fetch('https://swapi.dev/api/film/');\n      // const response = await fetch('https://swapi.dev/api/films/');\n      const response = await fetch('https://http-react-7aa10-default-rtdb.firebaseio.com/movies.json');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n      setIsLoading(false);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n\n  async function getMovies() {\n    try {\n      // const response = await axios('https://swapi.dev/api/films/');\n      const response = await axios('https://swapi.dev/api/film/');\n      const data = await response.data;\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n      setIsLoading(false);\n    } catch (error) {\n      // console.log(error.response.status);\n      if (error.response.status === 404) {\n        console.log('Something went wrong!');\n        setError('Something went wrong!');\n      }\n    }\n  }\n\n  useEffect(() => {\n    fetchMovieshandler();\n  }, [fetchMovieshandler]);\n\n  async function addMovieHandler(movie) {\n    const response = fetch('https://http-react-7aa10-default-rtdb.firebaseio.com/movies.json', {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        // not reqd by firebase..but used by many api's\n        'Content-Type': 'application/json'\n      }\n    });\n  } // function fetchMovieshandler() {\n  //   // default method is get\n  //   fetch('https://swapi.dev/api/films/')\n  //     .then(response => {\n  //       return response.json();\n  //     }).then(data => {\n  //       // becz object propeties names r different in response & html\n  //       const transformedMovies = data.results.map(movieData => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.release_date\n  //         };\n  //       });\n  //       setMovies(transformedMovies);\n  //     });\n  // }\n\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }, \"Found no movies.\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"div\", {\n      class: \"loader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMovieshandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }), content));\n}\n\nexport default App;","map":{"version":3,"names":["React","useCallback","useEffect","useState","MoviesList","axios","AddMovie","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMovieshandler","response","fetch","ok","Error","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","getMovies","status","console","log","addMovieHandler","movie","method","body","JSON","stringify","headers","content","length"],"sources":["C:/ES-06_JS/React/http/Http Requests/src/App.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport axios from 'axios';\nimport AddMovie from './components/AddMovie';\n\nfunction App() {\n\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // alternative:-  useCallback(async function() { ....non-arrow function\n  const fetchMovieshandler = useCallback(async () => {\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n\n      // to get error\n      // fetch api doesn't treats error status code as real error,it will not throw a technical error if we will get back error status code\n      // const response = await fetch('https://swapi.dev/api/film/');\n\n      // const response = await fetch('https://swapi.dev/api/films/');\n      const response = await fetch('https://http-react-7aa10-default-rtdb.firebaseio.com/movies.json');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n      setIsLoading(false);\n\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n\n  }, []);\n\n  async function getMovies() {\n    try {\n\n      // const response = await axios('https://swapi.dev/api/films/');\n      const response = await axios('https://swapi.dev/api/film/');\n\n      const data = await response.data;\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n      setIsLoading(false);\n\n    } catch (error) {\n      // console.log(error.response.status);\n      if (error.response.status === 404) {\n        console.log('Something went wrong!');\n        setError('Something went wrong!');\n      }\n    }\n\n  }\n\n  useEffect(() => {\n    fetchMovieshandler();\n  }, [fetchMovieshandler]);\n\n  async function addMovieHandler(movie) {\n    const response = fetch('https://http-react-7aa10-default-rtdb.firebaseio.com/movies.json', {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        // not reqd by firebase..but used by many api's\n        'Content-Type': 'application/json'\n      }\n    });\n\n  }\n\n\n  // function fetchMovieshandler() {\n  //   // default method is get\n  //   fetch('https://swapi.dev/api/films/')\n  //     .then(response => {\n  //       return response.json();\n  //     }).then(data => {\n  //       // becz object propeties names r different in response & html\n  //       const transformedMovies = data.results.map(movieData => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.release_date\n  //         };\n  //       });\n  //       setMovies(transformedMovies);\n  //     });\n  // }\n\n  let content = <p>Found no movies.</p>\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />\n  }\n  if (error) {\n    content = <p>{error}</p>\n  }\n  if (isLoading) {\n    content = <div class=\"loader\"></div>\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMovieshandler}>Fetch Movies</button>\n        {/* <button onClick={getMovies}>Fetch Movies With AXIOS</button> */}\n      </section>\n      <section>\n        {/* {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n        {!isLoading && movies.length === 0 && !error && <p>Found no movies.</p>}\n        {!isLoading && error && <p>{error}</p>}\n        {isLoading && <div class=\"loader\"></div>} */}\n        <AddMovie />\n        {content}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}