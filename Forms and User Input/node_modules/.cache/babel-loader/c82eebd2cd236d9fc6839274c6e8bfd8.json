{"ast":null,"code":"var _jsxFileName = \"C:\\\\ES-06_JS\\\\React\\\\Forms and User Input\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport useInput from '../hooks/use-input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler\n  } = useInput(value => value.trim() !== ''); // this arrow function not executed here, it is passed to useInput hook, and entered value is also passed\n\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const enteredEmailIsValid = enteredEmail.trim() !== '' && enteredEmail.includes('@');\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n  let formIsValid = false; // check all validities\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n  };\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(enteredName);\n    console.log(enteredEmail);\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue); // nameInputRef.current.value = '';//not ideal way,don't manipulate the DOM\n\n    setEnteredName('');\n    setEnteredEmail('');\n    setEnteredEmailTouched(false);\n    setEnteredNameTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control ';\n  const emailInputClasses = emailInputIsInvalid ? 'form-control invalid' : 'form-control ';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Please enter a valid email!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"h5rrBEe62yOWliBAkAXDwp/dkgw=\", false, function () {\n  return [useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useInput","SimpleInput","props","value","enteredName","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","trim","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredNameIsValid","nameInputIsInvalid","enteredNameTouched","enteredEmailIsValid","includes","emailInputIsInvalid","formIsValid","nameInputChangeHandler","event","setEnteredName","target","nameInputBlurHandler","setEnteredNameTouched","emailInputChangeHandler","emailInputBlurHandler","formSubmissionHandler","preventDefault","console","log","enteredValue","nameInputRef","current","nameInputClasses","emailInputClasses"],"sources":["C:/ES-06_JS/React/Forms and User Input/src/components/SimpleInput.js"],"sourcesContent":["import { useState } from 'react';\nimport useInput from '../hooks/use-input';\n\nconst SimpleInput = (props) => {\n\n  const {\n    value: enteredName,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler\n  } = useInput(value => value.trim() !== '');\n  // this arrow function not executed here, it is passed to useInput hook, and entered value is also passed\n\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const enteredEmailIsValid = enteredEmail.trim() !== '' && enteredEmail.includes('@');\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n  // check all validities\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  }\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n  }\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  }\n\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  }\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    }\n    console.log(enteredName);\n    console.log(enteredEmail);\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue);\n    // nameInputRef.current.value = '';//not ideal way,don't manipulate the DOM\n    setEnteredName('');\n    setEnteredEmail('');\n    setEnteredEmailTouched(false);\n    setEnteredNameTouched(false);\n  }\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control ';\n  const emailInputClasses = emailInputIsInvalid ? 'form-control invalid' : 'form-control ';\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text'\n          id='name'\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && <p className=\"error-text\">Name must not be empty</p>}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor='email'>Your Email</label>\n        <input type='text'\n          id='email'\n          onChange={emailInputChangeHandler}\n          onBlur={emailInputBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputIsInvalid && <p className=\"error-text\">Please enter a valid email!</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}