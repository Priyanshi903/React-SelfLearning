{"ast":null,"code":"var _jsxFileName = \"C:\\\\ES-06_JS\\\\React\\\\Forms and User Input\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value); // if we use enteredName,chances might we get old state as states  r scheduled by react\n\n    if (event.target.value.trim() !== '') {\n      setEnteredNameIsValid(true);\n    }\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n    }\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue); // nameInputRef.current.value = '';//not ideal way,don't manipulate the DOM\n\n    setEnteredName('');\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control ';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef,\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"omBsZ5NQ7IdrKIzDUlGYC+5wNgo=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useRef","SimpleInput","props","nameInputRef","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredNameTouched","nameInputChangeHandler","event","target","value","trim","nameInputBlurHandler","formSubmissionHandler","preventDefault","console","log","enteredValue","current","nameInputIsInvalid","nameInputClasses"],"sources":["C:/ES-06_JS/React/Forms and User Input/src/components/SimpleInput.js"],"sourcesContent":["import { useState, useRef } from 'react';\nconst SimpleInput = (props) => {\n\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n    // if we use enteredName,chances might we get old state as states  r scheduled by react\n    if (event.target.value.trim() !== '') {\n      setEnteredNameIsValid(true);\n    }\n  }\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n    }\n  }\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return;\n    }\n    setEnteredNameIsValid(true);\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue);\n    // nameInputRef.current.value = '';//not ideal way,don't manipulate the DOM\n    setEnteredName('');\n  }\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control ';\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text'\n          id='name'\n          ref={nameInputRef}\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && <p className=\"error-text\">Name must not be empty</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;;;AACA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAE7B,MAAMC,YAAY,GAAGH,MAAM,EAA3B;EACA,MAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACO,kBAAD,EAAqBC,qBAArB,IAA8CR,QAAQ,CAAC,KAAD,CAA5D;EACA,MAAM,CAACS,kBAAD,EAAqBC,qBAArB,IAA8CV,QAAQ,CAAC,KAAD,CAA5D;;EAEA,MAAMW,sBAAsB,GAAGC,KAAK,IAAI;IACtCN,cAAc,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd,CADsC,CAEtC;;IACA,IAAIF,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,IAAnB,OAA8B,EAAlC,EAAsC;MACpCP,qBAAqB,CAAC,IAAD,CAArB;IACD;EACF,CAND;;EAQA,MAAMQ,oBAAoB,GAAGJ,KAAK,IAAI;IACpCF,qBAAqB,CAAC,IAAD,CAArB;;IACA,IAAIL,WAAW,CAACU,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BP,qBAAqB,CAAC,KAAD,CAArB;IACD;EACF,CALD;;EAOA,MAAMS,qBAAqB,GAAGL,KAAK,IAAI;IACrCA,KAAK,CAACM,cAAN;IACAR,qBAAqB,CAAC,IAAD,CAArB;;IACA,IAAIL,WAAW,CAACU,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BP,qBAAqB,CAAC,KAAD,CAArB;MACA;IACD;;IACDA,qBAAqB,CAAC,IAAD,CAArB;IACAW,OAAO,CAACC,GAAR,CAAYf,WAAZ;IACA,MAAMgB,YAAY,GAAGjB,YAAY,CAACkB,OAAb,CAAqBR,KAA1C;IACAK,OAAO,CAACC,GAAR,CAAYC,YAAZ,EAVqC,CAWrC;;IACAf,cAAc,CAAC,EAAD,CAAd;EACD,CAbD;;EAeA,MAAMiB,kBAAkB,GAAG,CAAChB,kBAAD,IAAuBE,kBAAlD;EAEA,MAAMe,gBAAgB,GAAGD,kBAAkB,GAAG,sBAAH,GAA4B,eAAvE;EAEA,oBACE;IAAM,QAAQ,EAAEN,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAEO,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAO,IAAI,EAAC,MAAZ;QACE,EAAE,EAAC,MADL;QAEE,GAAG,EAAEpB,YAFP;QAGE,QAAQ,EAAEO,sBAHZ;QAIE,MAAM,EAAEK,oBAJV;QAKE,KAAK,EAAEX;MALT;QAAA;QAAA;QAAA;MAAA,QAFF,EASGkB,kBAAkB,iBAAI;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QATzB;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAYE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAZF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAkBD,CA3DD;;GAAMrB,W;;KAAAA,W;AA6DN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}