Before React 16.8, Class components were the only way to track state and lifecycle on a React component. 
Function components were considered "state-less".
Return HTML via a render() function.example,
    class Car extends React.Component {
        constructor() {
            super();
            this.state = { color: "red" };
        }
        render() {
            return <h2>I am a {this.state.color} Car!</h2>;
        }
    }
export default Car;
If there is a constructor() function in your component, this function will be called when the component gets initiated.

If your component has a constructor function, the props should always be passed to the constructor and also to the React.Component via the super() method.
    Example,
    class Car extends React.Component {
        constructor(props) {
            super(props);
        }
        render() {
            return <h2>I am a {this.props.model}!</h2>;
        }
    }
export default Car;

The state object is initialized in the constructor:
class Car extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            brand: "Ford",
            model: "Mustang",
            color: "red",
            year: 1964
        };
    }
    changeColor = () => {
        this.setState({ color: "blue" });
    }
    render() {
        return (
            <div>
                <h1>My {this.state.brand}</h1>
                <p>
                    It is a {this.state.color}
                    {this.state.model}
                    from {this.state.year}.
                </p>
                <button
                    type="button"
                    onClick={this.changeColor}
                >Change color</button>
            </div>
        );
    }
}


Lifecycle of Components: -----
    Mounting, Updating, and Unmounting.
Mounting means putting elements into the DOM.

React has four built -in methods that gets called, in this order, when mounting a component:
1.constructor()
2.getDerivedStateFromProps()
3.render()
4.componentDidMount()
The render() method is required and will always be called, the others are optional and will be called if you define them.

constructor
The constructor() method is called before anything else, when the component is initiated, and it is the natural place to set up the initial state and other initial values.
The constructor() method is called with the props, as arguments, and you should always start by calling the super(props) before anything else, 
this will initiate the parent's constructor method and allows the component to inherit methods from its parent (React.Component).

getDerivedStateFromProps
The getDerivedStateFromProps() method is called right before rendering the element(s) in the DOM.
This is the natural place to set the state object based on the initial props.
It takes state as an argument, and returns an object with changes to the state.

render
The render() method is required, and is the method that actually outputs the HTML to the DOM.

componentDidMount
The componentDidMount() method is called after the component is rendered.
This is where you run statements that requires that the component is already placed in the DOM.

Updating
The next phase in the lifecycle is when a component is updated.
A component is updated whenever there is a change in the component's state or props.
React has five built-in methods that gets called, in this order, when a component is updated:
(i)   getDerivedStateFromProps()
(ii)  shouldComponentUpdate()
(iii) render()
(iv)  getSnapshotBeforeUpdate()
(v)   componentDidUpdate()

Unmounting
The next phase in the lifecycle is when a component is removed from the DOM, or unmounting as React likes to call it.
React has only one built-in method that gets called when a component is unmounted:
componentWillUnmount()

componentDidMount() equivalent to useEffect(...,[]) without any dependency:called once comp mounted(was evaluated & rendered)
componentDidUpdate() equivalent to useEffect(...,[somevalue]) with dependency:called once comp updated(was evaluated & rendered)
componentWillUnmount() equivalent to useEffect(()=>{return ()=>{...}},[]) with cleanup code:called right before comp is unmounted(removed from DOM)